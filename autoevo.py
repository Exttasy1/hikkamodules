import asyncio
from asyncio import sleep
from telethon.tl.types import Message
from telethon import functions
from .. import loader, utils
from telethon.tl.types import ChatAdminRights
from ..inline.types import InlineCall
import re

#meta developer: @modEvoLife
__version__ = (1,0,0)

@loader.tds
class Autoevo(loader.Module):
    '''–ú–æ–¥—É–ª—å –Ω–∞ –∞–≤—Ç–æ–∫–æ–ø–∞–Ω–∏–µ –∏ —Ç.–¥'''
    strings={"name": "AutoEvo"}
    
    async def client_ready(self):
        self._backup_channel, _ = await utils.asset_channel(
            self.client,
            "AutoEvo",
            "–ì—Ä—É–ø–ø–∞ –¥–ª—è –º–æ–¥—É–ª—è AutoEvo",
            silent=True,
            archive=True)
        await self.client(functions.channels.InviteToChannelRequest(self._backup_channel, ['@mine_evo_bot']))
        await self.client(functions.channels.EditAdminRequest(
                channel=self._backup_channel,
                user_id="@mine_evo_bot",
                admin_rights=ChatAdminRights(ban_users=True, post_messages=True, edit_messages=True),
                rank="EvoBot",))
        if self.get("aestatus") == None:
            self.set("aestatus", False)
        if self.get("aestatusmine") == None:
            self.set("aestatusmine", False)
        if self.get("aestatusthx") == None:
            self.set("aestatusthx", False)
        if self.get("aestatuseb") == None:
            self.set("aestatuseb", False)
        if self.get("clicks") == None:
            self.set("clicks", 0)
        if self.get("kts") == None:
            self.set("kts", 0)
        if self.get("rkts") == None:
            self.set("rkts", 0)
        if self.get("ks") == None:
            self.set("ks", 0)
        if self.get("rks") == None:
            self.set("rks", 0)
        if self.get("mifs") == None:
            self.set("mifs", 0)
        if self.get("krs") == None:
            self.set("krs", 0)
        if self.get("zvs") == None:
            self.set("zvs", 0)
        if self.get("allks") == None:
            self.set("allks", 0)
        if self.get("pls") == None:
            self.set("pls", 0)
        if self.get("busts") == None:
            self.set("busts", 0)
        if self.get("plthx") == None:
            self.set("plthx", 0)
        if self.get("pleb") == None:
            self.set("pleb", 0)
        if self.get("keb") == None:
            self.set("keb", 0)
        if self.get("rkeb") == None:
            self.set("rkeb", 0)
        if self.get("mefeb") == None:
            self.set("mefeb", 0)
        if self.get("kreb") == None:
            self.set("kreb", 0)
        await self.client.send_message(5522271758, "–µ–±")
        intervalmine=self.config["intervalmine"]
        if self.get("aestatus"):
            if self.get("aestatusmine"):
                while self.get("aestatusmine")==True and self.get("aestatus")==True:
                    await self.client.send_message("@mine_evo_bot", "–∫–æ–ø")
                    await asyncio.sleep(intervalmine)
        async with self.client.conversation(self._backup_channel) as conv:
            while self.get('aestatuseb'):
                await conv.send_message("–µ–±")
                try:
                    res = conv.get_response()
                except asyncio.exceptions.TimeoutError:
                    
                    await conv.send_message("–µ–±")
                else:
                    break
                await asyncio.sleep(1800)
                conv.cancel()
                
    def __init__(self):
        self.config = loader.ModuleConfig(
                loader.ConfigValue(
                    "intervalmine",
                    2.0,
                    lambda: "–ò–Ω—Ç–µ—Ä–≤–∞–ª –∫–æ–ø–∞–Ω–∏—è",
                    validator=loader.validators.Float()
                )
            )
        
    @loader.command()
    async def autoevo(self, message):
        '''–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º'''
        aestatus=self.get("aestatus")
        aestatusmine=self.get("aestatusmine")
        aestatusthx=self.get("aestatusthx")
        aestatuseb=self.get("aestatuseb")
        await self.inline.form(
                text=f"üéÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º</b> <b>AutoEvo</b>\n\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å:</b> {aestatus}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> {aestatusmine}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å Thx:</b> {aestatusthx}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –µ–±:</b> {aestatuseb}\n\nüõë –ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–í—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ üõë",
                message=message,
                reply_markup=[
                        [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª",
                                "callback": self.inline_but_one,
                            },
                            {
                                "text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                "callback": self.settings,
                            }
                        ],
                        [
                            {
                                "text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                "callback": self.abobanatr,
                            }
                        ]
                    ]
            )
            
    async def inline_but_one(self, call: InlineCall):
        status = not self.get("aestatus")
        self.set("aestatus", status)
        status = self.get("aestatus")
        await call.answer(f"AutoEvo {status}")
        if self.get("aestatus"):
            status = "–í–∫–ª—é—á–µ–Ω"
        else:
            status = "–í—ã–∫–ª—é—á–µ–Ω"
        aestatus=self.get("aestatus")
        aestatusmine=self.get("aestatusmine")
        aestatusthx=self.get("aestatusthx")
        aestatuseb=self.get("aestatuseb")
        await call.edit(
                text=f"üéÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º</b> <b>AutoEvo</b>\n\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å:</b> {aestatus}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> {aestatusmine}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å Thx:</b> {aestatusthx}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –µ–±:</b> {aestatuseb}\n\nüõë –ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–í—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ üõë",
                reply_markup=[
                        [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª",
                                "callback": self.inline_but_one,
                            },
                            {
                                "text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                "callback": self.settings,
                            }
                        ],
                        [
                            {
                                "text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                "callback": self.abobanatr,
                            }
                        ]
                    ]
            )
            
    async def settings(self, call: InlineCall):
        if self.get("aestatus"):
            status = "–í–∫–ª—é—á–µ–Ω"
        else:
            status = "–í—ã–∫–ª—é—á–µ–Ω"
        aestatus=self.get("aestatus")
        aestatusmine=self.get("aestatusmine")
        aestatusthx=self.get("aestatusthx")
        aestatuseb=self.get("aestatuseb")
        await call.edit(
                text=f"üéÆ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è</b> <b>AutoEvo</b>\n\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> {aestatusmine}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å Thx:</b> {aestatusthx}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –µ–±:</b> {aestatuseb}\n\nüõë –ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–í—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ üõë",
                reply_markup=[
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–∫–æ–ø–∞–Ω–∏–µ",
                                "callback": self.amine,
                            }
                        ],
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æthx",
                                "callback": self.athx,
                            }
                        ],
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–µ–±",
                                "callback": self.aeb,
                            }
                        ],
                    [
                            {
                                "text": "–ù–∞–∑–∞–¥",
                                "callback": self.autoevob,
                            }
                        ]
                    ]

            )
            
    async def amine(self, call: InlineCall):
        aestatusmine=not self.get("aestatusmine")
        self.set("aestatusmine", aestatusmine)
        aestatus=self.get("aestatus")
        aestatusmine=self.get("aestatusmine")
        aestatusthx=self.get("aestatusthx")
        aestatuseb=self.get("aestatuseb")
        await call.edit(
                text=f"üéÆ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è</b> <b>AutoEvo</b>\n\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> {aestatusmine}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å Thx:</b> {aestatusthx}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –µ–±:</b> {aestatuseb}\n\nüõë –ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–í—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ üõë",
                reply_markup=[
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–∫–æ–ø–∞–Ω–∏–µ",
                                "callback": self.amine,
                            }
                        ],
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æthx",
                                "callback": self.athx,
                            }
                        ],
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–µ–±",
                                "callback": self.aeb,
                            }
                        ],
                    [
                            {
                                "text": "–ù–∞–∑–∞–¥",
                                "callback": self.autoevob,
                            }
                        ]
                    ]

            )
    
    async def athx(self, call: InlineCall):
        aestatusthx=not self.get("aestatusthx")
        self.set("aestatusthx", aestatusthx)
        aestatus=self.get("aestatus")
        aestatusmine=self.get("aestatusmine")
        aestatusthx=self.get("aestatusthx")
        aestatuseb=self.get("aestatuseb")
        await call.edit(
                text=f"üéÆ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è</b> <b>AutoEvo</b>\n\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> {aestatusmine}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å Thx:</b> {aestatusthx}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –µ–±:</b> {aestatuseb}\n\nüõë –ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–í—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ üõë",
                reply_markup=[
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–∫–æ–ø–∞–Ω–∏–µ",
                                "callback": self.amine,
                            }
                        ],
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æthx",
                                "callback": self.athx,
                            }
                        ],
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–µ–±",
                                "callback": self.aeb,
                            }
                        ],
                    [
                            {
                                "text": "–ù–∞–∑–∞–¥",
                                "callback": self.autoevob,
                            }
                        ]
                    ]

            )
    
    async def aeb(self, call: InlineCall):
        aestatuseb=not self.get("aestatuseb")
        self.set("aestatuseb", aestatuseb)
        aestatus=self.get("aestatus")
        aestatusmine=self.get("aestatusmine")
        aestatusthx=self.get("aestatusthx")
        aestatuseb=self.get("aestatuseb")
        await call.edit(
                text=f"üéÆ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥—É–ª—è</b> <b>AutoEvo</b>\n\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> {aestatusmine}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å Thx:</b> {aestatusthx}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –µ–±:</b> {aestatuseb}\n\nüõë –ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–í—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ üõë",
                reply_markup=[
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–∫–æ–ø–∞–Ω–∏–µ",
                                "callback": self.amine,
                            }
                        ],
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æthx",
                                "callback": self.athx,
                            }
                        ],
                    [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–µ–±",
                                "callback": self.aeb,
                            }
                        ],
                    [
                            {
                                "text": "–ù–∞–∑–∞–¥",
                                "callback": self.autoevob,
                            }
                        ]
                    ]

            )
            
    async def autoevob(self, call: InlineCall):
        aestatus=self.get("aestatus")
        aestatusmine=self.get("aestatusmine")
        aestatusthx=self.get("aestatusthx")
        aestatuseb=self.get("aestatuseb")
        await call.edit(
                text=f"üéÆ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º</b> <b>AutoEvo</b>\n\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å:</b> {aestatus}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> {aestatusmine}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å Thx:</b> {aestatusthx}\n‚ñ´Ô∏è<b>–°—Ç–∞—Ç—É—Å –µ–±:</b> {aestatuseb}\n\nüõë –ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è/–í—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ üõë",
                reply_markup=[
                        [
                            {
                                "text": "–í–∫–ª/–í—ã–∫–ª",
                                "callback": self.inline_but_one,
                            },
                            {
                                "text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                                "callback": self.settings,
                            }
                        ],
                        [
                            {
                                "text": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                "callback": self.abobanatr,
                            }
                        ]
                    ]
            )
    async def abobanatr(self, call: InlineCall):
        kts=self.get("kts")
        rkts=self.get("rkts")
        ks=self.get("ks")
        rks=self.get("rks")
        mifs=self.get("mifs")
        krs=self.get("krs")
        zvs=self.get("zvs")
        clicks=self.get("clicks")
        allks=self.get("allks")
        pls=self.get("pls")
        busts=self.get("busts")
        plthx=self.get("plthx")
        pleb=self.get("pleb")
        keb=self.get("keb")
        rkeb=self.get("rkeb")
        mefeb=self.get("mefeb")
        kreb=self.get("kreb")
        await call.edit(
                text=f"üéÆ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—è</b> <b>AutoEvo</b>\n\n<i><b>üß±  | –í —à–∞—Ö—Ç–µ :\n\n</b></i><emoji document_id=5469718869536940860>üëÜ</emoji> <i>| –ó–∞ {clicks} <b>–∫–ª–∏–∫–∞\n\n‚úâÔ∏è | –ö–æ–Ω–≤–µ—Ä—Ç : {kts}\n</b>üßß | –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç : {rkts}\nüì¶ | –ö–µ–π—Å : {ks}</i>\n<emoji document_id=5359741159566484212>üó≥</emoji> <i>| <b>–†–µ–¥–∫–∏–π –ö–µ–π—Å : {rks}</b> \n<b>üïã | –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å : {mifs}</b> </i>\n<emoji document_id=5471952986970267163>üíé</emoji> <i><b>| –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ö–µ–π—Å : {krs}</b> \n<b>üåå | –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å : {zvs}</b>\n–í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤ —Å —à–∞—Ö—Ç—ã : {allks}</i> \n\n<emoji document_id=5431783411981228752>üéÜ</emoji><b> | –ü–ª–∞–∑–º–∞ : {pls}</b> \n<emoji document_id=5431449001532594346>‚ö°Ô∏è</emoji> | <b>–ë—É—Å—Ç—ã : {busts}</b>\n\n<b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å :\nüéÜ | –ü–ª–∞–∑–º–∞ : </b>{pleb}\n<i>üì¶ | <b>–ö–µ–π—Å</b> : </i>{keb}\nüó≥ <i>| <b>–†–µ–¥–∫–∏–π –ö–µ–π—Å : </b></i>{rkeb}\n<b><i>üïã | –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å : </i></b>{mefeb}\nüíé <b><i>| –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ö–µ–π—Å : </i></b>{kreb}\n\n<b>Thx :</b>\n<emoji document_id=5821388137443626414>üåê</emoji> <b>| –ü–ª–∞–∑–º—ã —Å 'thx' –∫–æ–≥–¥–∞ –±–ª–∞–≥–æ–¥–∞—Ä–∏—à—å —Ç—ã : {plthx}</b>",
                reply_markup=[
                        [
                            {
                                "text": "–ù–∞–∑–∞–¥",
                                "callback": self.autoevob,
                            },
                            {
                                "text": "–û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                                "callback": self.sbros,
                            }
                        ]
                    ]
            )
            
    @loader.watcher()
    async def thx(self, message):
        if message.chat_id == -1001565066632:
            if self.get("aestatus") == True and self.get("aestatusthx") == True:
                if "(–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É Thx —á—Ç–æ–±—ã –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å)" in message.raw_text:
                    await self.client.send_message(5522271758, "Thx")
                    await asyncio.sleep(3)
                    await self.client.send_message(5522271758, "Thx")
        if message.chat_id == -1001876775303:
            if self.get("aestatus") == True and self.get("aestatusthx") == True:
                if "(–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É Thx —á—Ç–æ–±—ã –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –∏ –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å)" in message.raw_text:
                    await self.client.send_message(5522271758, "Thx")
                    await asyncio.sleep(3)
                    await self.client.send_message(5522271758, "Thx")

    @loader.watcher(only_message=True)
    async def watcher(self, message):
        if message.chat_id == 5522271758 and "–¢—ã –Ω–∞—à–µ–ª(–ª–∞) –∫–æ–Ω–≤–µ—Ä—Ç." in message.raw_text:
            a = self.get("kts")
            a += 1
            self.set("kts", a)
            b = self.get("allks")
            b += 1
            self.set("allks", b)
        if message.chat_id == 5522271758 and "–¢—ã –Ω–∞—à–µ–ª(–ª–∞) —Ä–µ–¥–∫–∏–π –∫–æ–Ω–≤–µ—Ä—Ç." in message.raw_text:
            a = self.get("rkts")
            a += 1
            self.set("rkts", a)
            b = self.get("allks")
            b += 1
            self.set("allks", b)
        if message.chat_id == 5522271758 and "–¢—ã –Ω–∞—à–µ–ª(–ª–∞) –ö–µ–π—Å!" in message.raw_text:
            a = self.get("ks")
            a += 1
            self.set("ks", a)
            b = self.get("allks")
            b += 1
            self.set("allks", b)
        if message.chat_id == 5522271758 and "–¢—ã –Ω–∞—à–µ–ª(–ª–∞) –†–µ–¥–∫–∏–π –ö–µ–π—Å!" in message.raw_text:
            a = self.get("rks")
            a += 1
            self.set("rks", a)
            b = self.get("allks")
            b += 1
            self.set("allks", b)
        if message.chat_id == 5522271758 and "–¢—ã –Ω–∞—à–µ–ª(–ª–∞) –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å!" in message.raw_text:
            a = self.get("mifs")
            a += 1
            self.set("mifs", a)
            b = self.get("allks")
            b += 1
            self.set("allks", b)
        if message.chat_id == 5522271758 and "–¢—ã –Ω–∞—à–µ–ª(–ª–∞) –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ö–µ–π—Å!" in message.raw_text:
            a = self.get("krs")
            a += 1
            self.set("krs", a)
            b = self.get("allks")
            b += 1
            self.set("allks", b)
        if message.chat_id == 5522271758 and "–¢—ã –Ω–∞—à–µ–ª(–ª–∞) –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å!" in message.raw_text:
            a = self.get("zvs")
            a += 1
            self.set("zvs", a)
            b = self.get("allks")
            b += 1
            self.set("allks", b)
        if message.chat_id == 5522271758 and "–¢—ã –Ω–∞—à–µ–ª(–ª–∞) 1 –ø–ª–∞–∑–º—É." in message.raw_text:
            a = self.get("pls")
            a += 1
            self.set("pls", a)
        if message.chat_id == 5522271758 and "–¢—ã –Ω–∞—à–µ–ª(–ª–∞) 2 –ø–ª–∞–∑–º—ã." in message.raw_text:
            a = self.get("pls")
            a += 2
            self.set("pls", a)
        if message.chat_id == 5522271758 and "—Ç—ã –Ω–∞—à–µ–ª(–ª–∞) —Ä–µ–¥–∫–∏–π –±—É—Å—Ç–µ—Ä:" in message.raw_text or "—Ç—ã –Ω–∞—à–µ–ª(–ª–∞) –æ–±—ã—á–Ω—ã–π –±—É—Å—Ç–µ—Ä:" in message.raw_text or "—Ç—ã –Ω–∞—à–µ–ª(–ª–∞) –≠–ü–ò–ß–ï–°–ö–ò–ô –±—É—Å—Ç–µ—Ä:" in message.raw_text:
            a = self.get("busts")
            a += 1
            self.set("busts", a)
        if message.chat_id == 5522271758 and "—Ç—ã –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª(–∞) –∏–≥—Ä–æ–∫–∞" in message.raw_text and "üéÜ" in message.raw_text:
            plebc = message.text.index("<b>+") + len("<b>+")
            plebcc = message.text.index("</b>", plebc)
            plebcr = message.text[plebc:plebcc]
            plebcr = plebcr.replace(",","")
            plebcr = int(plebcr)
            pleb = self.get("plthx")
            pleb += plebcr
            self.set("plthx",pleb)
        if message.chat_id == 5522271758 and "–†—É–¥—ã –¥–æ —Å–ª–µ–¥. —É—Ä.:" in message.raw_text:
            a = self.get("clicks")
            a += 1
            self.set("clicks", a)
        if message.chat_id == 5522271758 and "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω:" in message.raw_text and "–ö–µ–π—Å" in message.raw_text:
            plebc = message.text.index("üì¶ | <b>–ö–µ–π—Å  +") + len("üì¶ | <b>–ö–µ–π—Å  +")
            plebc = message.text.strip().index("üì¶ | <b>–ö–µ–π—Å  +") + len("üì¶ | <b>–ö–µ–π—Å  +")
            plebcc = message.text.index("</b>", plebc)
            plebcr = message.text[plebc:plebcc]
            plebcr = int(plebcr)
            pleb = self.get("keb")
            pleb += plebcr
            self.set("keb",pleb)
        if message.chat_id == 5522271758 and "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω:" in message.raw_text and "–ü–ª–∞–∑–º–∞" in message.raw_text:
            plebc = message.text.index("üéÜ | <b>–ü–ª–∞–∑–º–∞  +") + len("üéÜ | <b>–ü–ª–∞–∑–º–∞  +")
            plebcc = message.text.index("</b>", plebc)
            plebcr = message.text[plebc:plebcc]
            plebcr = int(plebcr)
            pleb = self.get("pleb")
            pleb += plebcr
            self.set("pleb",pleb)
        if message.chat_id == 5522271758 and "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω:" in message.raw_text and "–†–µ–¥–∫–∏–π –ö–µ–π—Å" in message.raw_text:
            plebc = message.text.index("üó≥ | <b>–†–µ–¥–∫–∏–π –ö–µ–π—Å  +") + len("üó≥ | <b>–†–µ–¥–∫–∏–π –ö–µ–π—Å  +")
            plebcc = message.text.index("</b>", plebc)
            plebcr = message.text[plebc:plebcc]
            plebcr = int(plebcr)
            pleb = self.get("rkeb")
            pleb += plebcr
            self.set("rkeb",pleb)
        if message.chat_id == 5522271758 and "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω:" in message.raw_text and "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å" in message.raw_text:
            plebc = message.text.index("üïã | <b>–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å  +") + len("üïã | <b>–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å  +")
            plebcc = message.text.index("</b>", plebc)
            plebcr = message.text[plebc:plebcc]
            plebcr = int(plebcr)
            pleb = self.get("mefeb")
            pleb += plebcr
            self.set("mefeb",pleb)
        if message.chat_id == 5522271758 and "–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å –ø–æ–ª—É—á–µ–Ω:" in message.raw_text and "–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ö–µ–π—Å" in message.raw_text:
            plebc = message.text.index("üíé | <b>–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ö–µ–π—Å  +") + len("üíé | <b>–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ö–µ–π—Å  +")
            plebcc = message.text.index("</b>", plebc)
            plebcr = message.text[plebc:plebcc]
            plebcr = int(plebcr)
            pleb = self.get("kreb")
            pleb += plebcr
            self.set("kreb",pleb)

    async def sbros(self, call: InlineCall):
        self.set("clicks", 0)
        self.set("kts", 0)
        self.set("rkts", 0)
        self.set("ks", 0)
        self.set("rks", 0)
        self.set("mifs", 0)
        self.set("krs", 0)
        self.set("zvs", 0)
        self.set("allks", 0)
        self.set("pls", 0)
        self.set("busts", 0)
        self.set("plthx", 0)
        self.set("pleb", 0)
        self.set("keb", 0)
        self.set("rkeb", 0)
        self.set("mefeb", 0)
        self.set("kreb", 0)
        await call.answer("–í—ã –æ–±–Ω—É–ª–∏–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É!")
        kts=self.get("kts")
        rkts=self.get("rkts")
        ks=self.get("ks")
        rks=self.get("rks")
        mifs=self.get("mifs")
        krs=self.get("krs")
        zvs=self.get("zvs")
        clicks=self.get("clicks")
        allks=self.get("allks")
        pls=self.get("pls")
        busts=self.get("busts")
        plthx=self.get("plthx")
        pleb=self.get("pleb")
        keb=self.get("keb")
        rkeb=self.get("rkeb")
        mefeb=self.get("mefeb")
        kreb=self.get("kreb")
        await call.edit(
                text=f"üéÆ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥—É–ª—è</b> <b>AutoEvo</b>\n\n<i><b>üß±  | –í —à–∞—Ö—Ç–µ :\n\n</b></i><emoji document_id=5469718869536940860>üëÜ</emoji> <i>| –ó–∞ {clicks} <b>–∫–ª–∏–∫–∞\n\n‚úâÔ∏è | –ö–æ–Ω–≤–µ—Ä—Ç : {kts}\n</b>üßß | –†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç : {rkts}\nüì¶ | –ö–µ–π—Å : {ks}</i>\n<emoji document_id=5359741159566484212>üó≥</emoji> <i>| <b>–†–µ–¥–∫–∏–π –ö–µ–π—Å : {rks}</b> \n<b>üïã | –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å : {mifs}</b> </i>\n<emoji document_id=5471952986970267163>üíé</emoji> <i><b>| –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ö–µ–π—Å : {krs}</b> \n<b>üåå | –ó–≤—ë–∑–¥–Ω—ã–π –ö–µ–π—Å : {zvs}</b>\n–í—Å–µ–≥–æ –∫–µ–π—Å–æ–≤ —Å —à–∞—Ö—Ç—ã : {allks}</i> \n\n<emoji document_id=5431783411981228752>üéÜ</emoji><b> | –ü–ª–∞–∑–º–∞ : {pls}</b> \n<emoji document_id=5431449001532594346>‚ö°Ô∏è</emoji> | <b>–ë—É—Å—Ç—ã : {busts}</b>\n\n<b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å :\nüéÜ | –ü–ª–∞–∑–º–∞ : </b>{pleb}\n<i>üì¶ | <b>–ö–µ–π—Å</b> : </i>{keb}\nüó≥ <i>| <b>–†–µ–¥–∫–∏–π –ö–µ–π—Å : </b></i>{rkeb}\n<b><i>üïã | –ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å : </i></b>{mefeb}\nüíé <b><i>| –ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ö–µ–π—Å : </i></b>{kreb}\n\n<b>Thx :</b>\n<emoji document_id=5821388137443626414>üåê</emoji> <b>| –ü–ª–∞–∑–º—ã —Å 'thx' –∫–æ–≥–¥–∞ –±–ª–∞–≥–æ–¥–∞—Ä–∏—à—å —Ç—ã : {plthx}</b>",
                reply_markup=[
                        [
                            {
                                "text": "–ù–∞–∑–∞–¥",
                                "callback": self.autoevob,
                            },
                            {
                                "text": "–û–±–Ω—É–ª–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É",
                                "callback": self.sbros,
                            }
                        ]
                    ]
            )
